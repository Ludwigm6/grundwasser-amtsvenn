[{"name":"app.R","content":"library(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(DT)\nlibrary(sf)\n\n\ngws <- readRDS(\"https://github.com/Ludwigm6/grundwasser-amtsvenn/raw/refs/heads/main/appdata/gws.RDS\")\ngwsHeader = readRDS(\"https://github.com/Ludwigm6/grundwasser-amtsvenn/raw/refs/heads/main/appdata/gwsHeader.RDS\")\n\nmaplayers = list()\nmaplayers[[1]] = read_sf(\"https://github.com/Ludwigm6/grundwasser-amtsvenn/raw/refs/heads/main/appdata/HuendfelderMoor_Daemme/HuendfelderMoor_Daemme.shp\") |> st_transform(4326)\n# maplayers[[2]] = read_sf(\"../data/HuendfelderMoor_Abflussrichtungen/HuendfelderMoor_Abflussrichtungen.shp\") |> st_transform(4326)\n\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n  # Application title\n  titlePanel(\"Grundwasserstand Demo\"),\n  \n  # Sidebar with a slider input for number of bins \n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(inputId = \"dateSelect\",\n                  label = \"Datum:\",\n                  min = min(gws$Datum),\n                  max = max(gws$Datum),\n                  value = max(gws$Datum)),\n      \n      \n      \n      plotOutput(\"datumMap\")\n      \n      \n    ),\n    \n    # Show a plot of the generated distribution\n    mainPanel(\n      plotOutput(\"datumPlot\"),\n      \n      \n     \n      DT::dataTableOutput(\"dailyMeasure\")\n      \n      \n      \n    )\n  )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n  #gws = readRDS(\"data/gws.RDS\")\n  \n  \n\n  output$dailyMeasure = renderDT(datatable(gws |> filter(Datum == as.Date(input$dateSelect)),\n                                           options = list(paging = FALSE))\n                                 )\n  \n  \n  output$datumPlot <- renderPlot({\n\n    ggplot(gws, aes(x = Datum, y = GWS))+\n      geom_point()+\n      geom_vline(aes(xintercept = input$dateSelect), color = \"firebrick3\", lwd = 1)+\n      facet_wrap(.~ID)\n  \n  })\n  \n  output$datumMap <- renderPlot({\n    \n    gwsHeader = left_join(gwsHeader, gws |> filter(Datum == as.Date(input$dateSelect)), by = \"ID\")\n    \n    ggplot()+\n      geom_sf(data = maplayers[[1]])+\n      geom_point(data = gwsHeader, mapping = aes(x = x, y = y, color = GWS), size = 3)+\n      scale_color_viridis_c(limits = c(4090, 4340), na.value = \"grey80\")+\n      theme_bw()\n      \n    \n    \n    \n    \n    \n  })\n  \n  \n}\n\n\n\n\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n","type":"text"}]
